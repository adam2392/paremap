% script to analyze reinstatement plots of important features 
clc; clear all; close all;

subj = 'NIH034';
typeTransform = 'multitaper';
timeLock = 'vocalization';
referenceType = 'bipolar';
typeReinstatement = 'within_blocks';

%% LOAD IN CHANNEL STRING
eegRootDirWork = '/Users/liaj/Documents/MATLAB/paremap';     % work
eegRootDirHome = '/Users/adam2392/Documents/MATLAB/Johns Hopkins/NINDS_Rotation';  % home
eegRootDirJhu = '/home/adamli/paremap';

% Determine which directory we're working with automatically
if     ~isempty(dir(eegRootDirWork)), eegRootDir = eegRootDirWork;
elseif ~isempty(dir(eegRootDirHome)), eegRootDir = eegRootDirHome;
elseif ~isempty(dir(eegRootDirJhu)), eegRootDir = eegRootDirJhu;
else   error('Neither Work nor Home EEG directories exist! Exiting'); end

% Either go through all the sessions, or a specific session
disp('STEP 1: Going through all sessions')
session = 'Meta Session [all]';
behDir=fullfileEEG(eegRootDir, subj, '/behavioral/paRemap');

subjDir = fullfileEEG(eegRootDir,subj); % directory to subject (e.g. NIH034)
docsDir = fullfileEEG(subjDir,'docs');  % directory to the docs (electordes.m, tagNames.txt, etc.)
talDir  = fullfileEEG(subjDir,'tal');
defaultEEGfile = fullfileEEG('/Volumes/Shares/FRNU/data/eeg/',subj,'/eeg.reref/');  % default event eegfile fields point here... switch to local before loading

%%-Load in the Events For This Task/Patient/Session
events = struct([]);                    %%- in functional form this is required so there is no confusion about events the function and events the variable
load(sprintf('%s/events.mat',behDir));  %%- load the events file
fprintf('Loaded %d events from %s\n', length(events), behDir);

%%- GET CORRECT EVENTS ONLY
% POST MODIFY EVENTS based on fields we want (e.g. is it correct or not)?
correctIndices = find([events.isCorrect]==1);
events = events(correctIndices);

jackSheet = fullfileEEG(docsDir, 'jacksheetMaster.txt');
[chanNums chanTags] = textread(jackSheet,'%d%s%*s');

%%% always look at all electrodes... worry about "good" and "bad" later (bad means inter-ictal activity or seizure activity)
%- three referencing options:  noreref (should manually subtract reference channel), reref bioploar, and reref laplacian
chanStr = {};   % cell for all the channel names
chanFile = 0;   % file for the channels (e.g. ~/NIH034/tal/leads.txt) 
chanList = [];  % list of the channels (e.g. 1-96)

switch referenceType
    case 'noreref'  
    case 'bipolar'
        fprintf('Bipolar referencing');
        chanFile      = [talDir '/leads_bp.txt'];
        [chan1 chan2] = textread(chanFile,'%d%*c%d');
        chanList      = [chan1 chan2];
        for iChan=1:size(chanList,1),
            %    chanStr{iChan} = sprintf('%d-%d (%s-%s)', chan1(iChan), chan2(iChan), chanTags{find(chanNums==chan1(iChan))}, chanTags{find(chanNums==chan2(iChan))} );
            chanStr{iChan} = sprintf('%s-%s', chanTags{find(chanNums==chan1(iChan))}, chanTags{find(chanNums==chan2(iChan))} );
        end
        eventEEGpath  = '/eeg.reref/';
    case 'global' % look at global electrodes / monopolar
        fprintf('STEP 1: Using Global referencing\n');
        chanFile      = [talDir '/leads.txt'];
        chanList      = textread(chanFile,'%d'); % read in the list of channels nums

        % set the names for each channel
        for iChan=1:size(chanList,1),
            chanStr{iChan} = sprintf('%s-global', chanTags{find(chanNums==chanList(iChan))} );
        end
        eventEEGpath  = '/eeg.reref/';
    otherwise
        fprintf('Error, no referencing scheme selected');
end
%% LOAD IN THE RANKING DATA generated by rankCosineSimilarity.m
subjDir = fullfile('/Users/adam2392/Documents/MATLAB/Johns Hopkins/NINDS_Rotation/Figures/', subj,'importantFeatures');
typePreProcessing = strcat(typeTransform, referenceType, '_', typeReinstatement);
rankedFeaturesDir = fullfile(subjDir, typePreProcessing);
rankFile = fullfile(rankedFeaturesDir, strcat(subj, '_importantIndices'));
rankData = load(rankFile);
importantIndices = find(rankData.Z >= 3); % find indices with z-score > 3

freqBands = {'delta', 'theta', 'alpha', 'beta', 'low gamma', 'high gamma', 'HFO'};

importantChannelIndices = ceil(importantIndices/7);
importantChannels = chanStr(importantChannelIndices);
importantFreqIndices = mod(importantIndices, 7);
importantFreqIndices = importantFreqIndices + 1;
importantFreqs = freqBands(importantFreqIndices);

%%- OPEN UP LOG FILE TO PRINT OUT MOST IMPORTANT FEATURES
logFile = strcat(rankedFeaturesDir, '/', subj, '.txt');
fid = fopen(logFile, 'w');
fprintf(fid, '\n %6s \n', subj); % print subject
for i=1:length(importantChannels)
    fprintf(fid, '%6s \n', [importantChannels{i}, ' , ', importantFreqs{i}]);
end 

% get the ticks, labels and timezero for reinstatement from example struct
exData = load('/Users/adam2392/Documents/MATLAB/Johns Hopkins/NINDS_Rotation/condensed_data_NIH034/morlet_bipolar/vocalization/session_1/0/BRICK_CLOCK/1  2_G1-G2.mat');
exData = exData.data;
timeTicks = exData.waveT(:,2);

LT = 1.5;
ticks = 1:5:length(timeTicks);
labels = timeTicks(ticks);
timeZero = exData.timeZero;

%%- extract the reinstatement per session/block and only use features with
%%> +3 zscore
% set the directories with the reinstatements
subjFigDir = fullfile('Figures', subj);
reinstatementDir = strcat(typeTransform, '_', referenceType, '/', typeReinstatement, '_', timeLock);
featureMatDir = strcat('./Figures/', subj, '/reinstatement_mat/', reinstatementDir);
sessionMats = dir(strcat(featureMatDir, '/*.mat'));
sessionMats = {sessionMats.name};

avgeFeatureSame = [];
avgeFeatureReverse = [];
avgeFeatureDiff = [];

% loop through all session mat files -> extract same, reverse, different
for iMat=1:length(sessionMats),
    sessionMats{iMat}
    data = load(strcat(featureMatDir, '/', sessionMats{iMat}));
    featureSame = data.featureSame(importantIndices, 1:timeZero, 1:timeZero);
    featureReverse = data.featureReverse(importantIndices, 1:timeZero, 1:timeZero);
    featureDiff = data.featureDiff(importantIndices, 1:timeZero, 1:timeZero);
    
    if isempty(avgeFeatureSame)
        avgeFeatureSame = featureSame;
        avgeFeatureReverse = featureReverse;
        avgeFeatureDiff = featureDiff;
    else
        avgeFeatureSame = cat(1, avgeFeatureSame, featureSame);
        avgeFeatureReverse = cat(1, avgeFeatureReverse, featureReverse);
        avgeFeatureDiff = cat(1, avgeFeatureDiff, featureDiff);
    end
    
    %%- PLOTTING OF FEATURESAME, FEATURESAME, FEATUREREVERSE
    figure
    fig = {};
    fig{end+1} = subplot(311)
    imagesc(squeeze(mean(featureSame,1)));
    title(['Same Pairs Cosine Similarity for ', sessionMats{iMat}])
    colorbar();
    clim = get(gca, 'clim');
    axis square
    hold on
    xlabel('Time (seconds)');
    ylabel('Time (seconds)');
    ax = gca;
    ax.YTick = ticks;
    ax.YTickLabel = labels;
    ax.XTick = ticks;
    ax.XTickLabel = labels;
    colormap('jet');
    set(gca,'tickdir','out','YDir','normal');
    set(gca, 'box', 'off');
    plot(get(gca, 'xlim'), [timeZero timeZero], 'k', 'LineWidth', LT)
    plot([timeZero timeZero], get(gca, 'ylim'), 'k', 'LineWidth', LT)
    
    fig{end+1} = subplot(312);
    imagesc(squeeze(mean(featureDiff,1)));
    title(['Different Word Pairs Cosine Similarity for ', sessionMats{iMat}])
    colorbar();
    set(gca, 'clim', clim);
    axis square
    hold on
    xlabel('Time (seconds)');
    ylabel('Time (seconds)');
    ax = gca;
    ax.YTick = ticks;
    ax.YTickLabel = labels;
    ax.XTick = ticks;
    ax.XTickLabel = labels;
    colormap('jet');
    set(gca,'tickdir','out','YDir','normal');
    set(gca, 'box', 'off');
    plot(get(gca, 'xlim'), [timeZero timeZero], 'k', 'LineWidth', LT)
    plot([timeZero timeZero], get(gca, 'ylim'), 'k', 'LineWidth', LT)

    fig{end+1} = subplot(313);
    imagesc(squeeze(mean(featureSame,1)) - squeeze(mean(featureDiff,1)));
    title({'Within-Blocks', ['Same-Different Word Pairs Cosine Similarity']})
    colorbar();
    axis square
    hold on
    xlabel('Time (seconds)');
    ylabel('Time (seconds)');
    ax = gca;
    ax.YTick = ticks;
    ax.YTickLabel = labels;
    ax.XTick = ticks;
    ax.XTickLabel = labels;
    colormap('jet');
    set(gca,'tickdir','out','YDir','normal');
    set(gca, 'box', 'off');
    plot(get(gca, 'xlim'), [timeZero timeZero], 'k', 'LineWidth', LT)
    plot([timeZero timeZero], get(gca, 'ylim'), 'k', 'LineWidth', LT)
    
    %%- Save Image
    newFigDir = fullfile(rankedFeaturesDir);
    
    fig = gcf;
    fig.PaperUnits = 'inches';
    pos = [0    0.6667   17.5972   10.4028];
    fig.PaperPosition = pos;
    figureFile = fullfile(newFigDir, sessionMats{iMat}(1:end-4));
    print(figureFile, '-dpng', '-r0')
    savefig(figureFile)
end

%%- PLOT AVERAGED
figure;
fig = {};
subplot(221);
fig{end+1} = gca;
imagesc(squeeze(mean(avgeFeatureSame, 1)));
colorbar(); colormap('jet')
clim = get(gca, 'clim');
axis square
hold on
title({typeReinstatement, ['Same Word Pairs Cosine Similarity']})
xlabel('Time (seconds)');
ylabel('Time (seconds)');
ax = gca;
ax.YTick = ticks;
ax.YTickLabel = labels;
ax.XTick = ticks;
ax.XTickLabel = labels;
set(gca,'tickdir','out','YDir','normal');
set(gca, 'box', 'off');
plot(get(gca, 'xlim'), [timeZero timeZero], 'k', 'LineWidth', LT)
plot([timeZero timeZero], get(gca, 'ylim'), 'k', 'LineWidth', LT)

subplot(222);
fig{end+1} = gca;
imagesc(squeeze(mean(avgeFeatureReverse, 1)));
set(gca, 'clim', clim);
colorbar(); colormap('jet')
axis square
hold on
title({typeReinstatement, ['Reverse Word Pairs Cosine Similarity']})
xlabel('Time (seconds)');
ylabel('Time (seconds)');
ax = gca;
ax.YTick = ticks;
ax.YTickLabel = labels;
ax.XTick = ticks;
ax.XTickLabel = labels;
set(gca,'tickdir','out','YDir','normal');
set(gca, 'box', 'off');
plot(get(gca, 'xlim'), [timeZero timeZero], 'k', 'LineWidth', LT)
plot([timeZero timeZero], get(gca, 'ylim'), 'k', 'LineWidth', LT)

subplot(223);
fig{end+1} = gca;
imagesc(squeeze(mean(avgeFeatureDiff, 1)));
colorbar(); colormap('jet')
set(gca, 'clim', clim);
axis square
hold on
title({typeReinstatement, ['Different Word Pairs Cosine Similarity']})
xlabel('Time (seconds)');
ylabel('Time (seconds)');
ax = gca;
ax.YTick = ticks;
ax.YTickLabel = labels;
ax.XTick = ticks;
ax.XTickLabel = labels;
set(gca,'tickdir','out','YDir','normal');
set(gca, 'box', 'off');
plot(get(gca, 'xlim'), [timeZero timeZero], 'k', 'LineWidth', LT)
plot([timeZero timeZero], get(gca, 'ylim'), 'k', 'LineWidth', LT)

subplot(224);
fig{end+1} = gca;
imagesc(squeeze(mean(avgeFeatureSame, 1) - mean(avgeFeatureDiff, 1)));
colorbar(); colormap('jet')
axis square
hold on
title({typeReinstatement, ['Same-Different Word Pairs Cosine Similarity']})
xlabel('Time (seconds)');
ylabel('Time (seconds)');
ax = gca;
ax.YTick = ticks;
ax.YTickLabel = labels;
ax.XTick = ticks;
ax.XTickLabel = labels;
set(gca,'tickdir','out','YDir','normal');
set(gca, 'box', 'off');
plot(get(gca, 'xlim'), [timeZero timeZero], 'k', 'LineWidth', LT)
plot([timeZero timeZero], get(gca, 'ylim'), 'k', 'LineWidth', LT)

